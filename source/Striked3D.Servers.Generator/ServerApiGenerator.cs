using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using Striked3D.Core;
using System.Reflection;
using System.Runtime;

namespace Striked3D.Servers.Generator
{
    [Generator]
    public class ServerApiGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var receiver = (ServerApiReceiver)context.SyntaxReceiver;

            foreach (var classDeclaration in receiver.Candidates)
            {
                var model = context.Compilation.GetSemanticModel(classDeclaration.SyntaxTree, true);
                var type = model.GetDeclaredSymbol(classDeclaration) as ITypeSymbol;

                if (type is null || !IsEnumeration(type))
                    continue;

                var code = GenerateCode(type);

                context.AddSource($"{type.Name}.api.generated.cs", code);
            }
        }

        public static bool IsEnumeration(ITypeSymbol type)
        {
            return type.GetAttributes()
                       .Any(a => a.AttributeClass?.ToString() == "Striked3D.Core.ApiDeclarationAttribute");
        }

        private static string GenerateCode(ITypeSymbol type)
        {
            var ns = type.ContainingNamespace.ToString();
            var partialServiceName = getServiceClassName(type);
            var items = GetMethods(type);

            return @$"// <auto-generated />
using System;
using Striked3D.Core;

{(string.IsNullOrWhiteSpace(ns) ? null : $"namespace {ns}")}
{{
    public partial class {partialServiceName}
    {{
{items}
    }}
}}
";
        }

        private static string getServiceClassName(ITypeSymbol type)
        {
            var classType = type as IMethodSymbol;

            var attribute = type.GetAttributes().Where(a => a.AttributeClass.Name == "ApiDeclarationAttribute" || a.AttributeClass.Name == "ApiDeclaration").FirstOrDefault();
            if (attribute != null)
            {
                foreach (var arg in attribute.ConstructorArguments)
                {
                    return arg.Value.ToString();
                }
            }

            throw new Exception("Type doenst have the ApiDeclarationMethodAttribute!");
        }

        private static string GetMethods(ITypeSymbol type)
        {
            var methodList = new List<string>();
            foreach (var member in type.GetMembers().Where(d => d is IMethodSymbol).Select(d => d as IMethodSymbol).Where(d => !d.IsImplicitlyDeclared && !(d.MethodKind == MethodKind.PropertyGet || d.MethodKind == MethodKind.PropertySet)))
            {
                var attributes = member.GetAttributes().Where(a => a.AttributeClass.Name == "ApiDeclarationMethod"
                        || a.AttributeClass.Name == "ApiDeclarationMethodAttribute").Count();

                if (attributes <= 0)
                    continue;

                //var methodDescription = "public "+ member.ReturnType.ToDisplayString() + " " + member.Name;
                var methodDescription = "\t\tpublic void " + member.Name;
                var argsDescription = "(";

                var args = new List<string>();
                var argsWithoutDelimiter = new List<string>();
                foreach (var d in member.Parameters)
                {
                    args.Add(d.Type.ToDisplayString() + " " + d.Name);
                    argsWithoutDelimiter.Add(d.Name);
                }

                var returnType = member.ReturnType.ToDisplayString();

                args.Add("Action<EngineCommandResult>" + " " + "callback = null");

                //member.Name
                argsDescription += string.Join(", ", args.ToArray());
                argsDescription += ") {" + Environment.NewLine;

                var paramArgs = argsWithoutDelimiter.Count > 0 ?  ", " + string.Join(", ", argsWithoutDelimiter.ToArray()) : "";
                var content = "\t\t\tthis.AddTask(new EngineTask(new EngineCommand(\"" + member.Name + "\"" + paramArgs + "), callback));";
                var end = Environment.NewLine + "\t\t}";

                methodList.Add(methodDescription + argsDescription + content + end);
            }

            return string.Join(Environment.NewLine, methodList.ToArray()); ;
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new ServerApiReceiver());
        }
    }
}
