// <auto-generated />
using System;
using Striked3D.Core;

namespace Striked3D.Servers
{
    public partial class RenderingServer
    {
		public void CreateViewport(Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("CreateViewport"), callback));
		}
		public void SetViewportPosition(System.Guid viewport, Striked3D.Types.Vector2D<int> position, Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("SetViewportPosition", viewport, position), callback));
		}
		public void SetViewportSize(System.Guid viewport, Striked3D.Types.Vector2D<int> size, Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("SetViewportSize", viewport, size), callback));
		}
		public void SetViewportCamera(System.Guid viewport, System.Guid cameraId, Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("SetViewportCamera", viewport, cameraId), callback));
		}
		public void CreateMesh(Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("CreateMesh"), callback));
		}
		public void SetTransform(System.Guid meshId, Striked3D.Types.Vector3D<float> pos, Striked3D.Types.Vector3D<float> scale, Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("SetTransform", meshId, pos, scale), callback));
		}
		public void SetMeshData(System.Guid meshId, int surface, Striked3D.Servers.Rendering.RenderPrimitiveType type, System.Collections.Hashtable meshData, Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("SetMeshData", meshId, surface, type, meshData), callback));
		}
		public void CreateMaterial(Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("CreateMaterial"), callback));
		}
		public void SetMaterialShader(System.Guid material, Silk.NET.Vulkan.ShaderStageFlags flag, string filename, Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("SetMaterialShader", material, flag, filename), callback));
		}
		public void SetMaterialParameter(System.Guid material, string name, object parameter, Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("SetMaterialParameter", material, name, parameter), callback));
		}
		public void SetPriority(System.Guid mesh, int priority, Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("SetPriority", mesh, priority), callback));
		}
		public void SetMaterial(System.Guid mesh, int surface, System.Guid material, Action<EngineCommandResult> callback = null) {
			this.AddTask(new EngineTask(new EngineCommand("SetMaterial", mesh, surface, material), callback));
		}
    }
}
